import React, { useState } from "react";
import Table from "../components/Table";
import MetricCard from "../components/MetricCard";
import DropdownButton from "../components/Button";

const Rewards = () => {
  const [activeTab, setActiveTab] = useState("Statement");

  const tabs = [
    { label: "Statement", key: "Statement" },
    { label: "Earned", key: "Earned" },
    { label: "Redeem Request", key: "RedeemRequest" },
    { label: "Redeem Approved", key: "RedeemApproved" },
    { label: "Redeem Rejected", key: "RedeemRejected" },
    { label: "Redeemed", key: "Redeemed" },
  ];

  // Base data
  const baseData = [
    {
      user: "Abiral Pradhanang",
      roleType: "Publisher",
      totalPoints: 120,
      totalRevenue: 12,
      status: "Active",
    },
    {
      user: "Anusha Puri",
      roleType: "Publisher",
      totalPoints: 35,
      totalRevenue: 3.5,
      status: "Inactive",
    },
    {
      user: "Bishal Khadka",
      roleType: "Editor",
      totalPoints: 24,
      totalRevenue: 2.4,
      status: "Active",
    },
    {
      user: "Isha Thapa Magar",
      roleType: "Reader",
      totalPoints: 190,
      totalRevenue: 19,
      status: "Active",
    },
    {
      user: "Prasiv Rai",
      roleType: "Reader",
      totalPoints: 78,
      totalRevenue: 7.8,
      status: "Active",
    },
    {
      user: "Sambriina Raut",
      roleType: "Reader",
      totalPoints: 68,
      totalRevenue: 6.8,
      status: "Inactive",
    },
  ];

  // Define headers and headerToKeyMap for each tab
  const tabConfig = {
    Statement: {
      headers: ["User", "Role Type", "Total Points", "Total Revenue", "Status"],
      headerToKeyMap: {
        User: "user",
        "Role Type": "roleType",
        "Total Points": "totalPoints",
        "Total Revenue": "totalRevenue",
        Status: "status",
      },
      statusOptions: ["Active", "Inactive", "Redeemed"],
      data: baseData,
    },
    Earned: {
      headers: ["User", "Point", "Date", "Available Points", "Status", "Source"],
      headerToKeyMap: {
        User: "user",
        Point: "totalPoints",
        Date: "date",
        "Available Points": "totalPoints",
        Status: "status",
        Source: "source",
      },
    statusOptions: ["Earned"],
      data: baseData
        .filter((item) => item.status === "Active")
        .map((item) => ({
          ...item,
          date: "2025-05-28",
          source: "Content Creation",
        })),
    },
    RedeemRequest: {
      headers: ["User", "Point", "Date", "Available Points", "Status"],
      headerToKeyMap: {
        User: "user",
        Point: "totalPoints",
        Date: "requestDate",
        "Available Points": "totalPoints",
        Status: "status",
      },
      statusOptions: ["Requested", "Rejected", "Approved", "Redeemed"],
      data: baseData
        .filter((item) => item.totalPoints > 100)
        .map((item) => ({
          ...item,
          requestDate: "2025-05-25",
        })),
    },
    RedeemApproved: {
      headers: ["User", "Point", "Date", "Available Points", "Status"],
      headerToKeyMap: {
        User: "user",
        Point: "totalPoints",
        Date: "approvalDate",
        "Available Points": "totalPoints",
        Status: "status",
      },
     statusOptions: ["Approved"],
      data: baseData
        .filter((item) => item.totalRevenue > 10)
        .map((item) => ({
          ...item,
          approvalDate: "2025-05-20",
        })),
    },
    RedeemRejected: {
      headers: ["User", "Point", "Date", "Available Points", "Status"],
      headerToKeyMap: {
        User: "user",
        Point: "totalPoints",
        Date: "rejectionDate",
        "Available Points": "totalPoints",
        Status: "status",
      },
    statusOptions: ["Rejected"],
      data: baseData
        .filter((item) => item.status === "Inactive")
        .map((item) => ({
          ...item,
          rejectionDate: "2025-05-22",
        })),
    },
    Redeemed: {
      headers: ["User", "Point", "Date", "Available Points", "Status"],
      headerToKeyMap: {
        User: "user",
        Point: "totalPoints",
        Date: "redeemDate",
        "Available Points": "totalPoints",
        Status: "status",
      },
      statusOptions: ["Redeemed"],
      data: baseData
        .filter((item) => item.totalRevenue <= 10)
        .map((item) => ({
          ...item,
          redeemDate: "2025-05-15",
        })),
    },
  };
// const currentTabConfig = tabConfig[activeTab];
  const statusOptions = [
    { label: "Active", value: "Active" },
    { label: "Inactive", value: "Inactive" },
  ];

  const handleStatusChange = (index, newStatus) => {
    console.log(`Status changed for row ${index} to ${newStatus}`);
  };

  const renderCustomActions = (rowIndex) => {
    return null;
  };

  // Get the current tab's configuration
  const currentTabConfig = tabConfig[activeTab] || tabConfig.Statement;

  return (
    <div className="rewards">
      <div className="metric-bg">
        <div className="metric-card">
          <MetricCard
            title="Total Revenue"
            value="Rs. 34.6K"
            backgroundColor="bg-white"
            textColor="text-black"
            icon={
              <svg
                width="20"
                height="19"
                viewBox="0 0 20 19"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M10.25 19C8.93333 19 7.69167 18.75 6.525 18.25C5.375 17.75 4.375 17.075 3.525 16.225C2.675 15.375 2 14.375 1.5 13.225C1 12.0583 0.75 10.8167 0.75 9.5C0.75 8.18333 1 6.95 1.5 5.8C2 4.63333 2.675 3.625 3.525 2.775C4.375 1.925 5.375 1.25 6.525 0.749999C7.69167 0.249999 8.93333 -9.53674e-07 10.25 -9.53674e-07C11.5667 -9.53674e-07 12.8 0.249999 13.95 0.749999C15.1167 1.25 16.125 1.925 16.975 2.775C17.825 3.625 18.5 4.63333 19 5.8C19.5 6.95 19.75 8.18333 19.75 9.5C19.75 10.8167 19.5 12.0583 19 13.225C18.5 14.375 17.825 15.375 16.975 16.225C16.125 17.075 15.1167 17.75 13.95 18.25C12.8 18.75 11.5667 19 10.25 19ZM10.25 17.5C12.4833 17.5 14.375 16.725 15.925 15.175C17.475 13.625 18.25 11.7333 18.25 9.5C18.25 7.26667 17.475 5.375 15.925 3.825C14.375 2.275 12.4833 1.5 10.25 1.5C8.01667 1.5 6.125 2.275 4.575 3.825C3.025 5.375 2.25 7.26667 2.25 9.5C2.25 11.7333 3.025 13.625 4.575 15.175C6.125 16.725 8.01667 17.5 10.25 17.5ZM10.225 16.3C10.4083 16.3 10.5667 16.2333 10.7 16.1C10.8333 15.9667 10.9 15.8083 10.9 15.625V15.1C11.6833 15 12.3833 14.7083 13 14.225C13.6333 13.7417 13.95 13.0167 13.95 12.05C13.95 11.35 13.7417 10.7333 13.325 10.2C12.925 9.65 12.125 9.15833 10.925 8.725C9.875 8.375 9.175 8.06667 8.825 7.8C8.475 7.53333 8.3 7.16667 8.3 6.7C8.3 6.23333 8.475 5.85 8.825 5.55C9.19167 5.25 9.68333 5.1 10.3 5.1C10.6667 5.1 10.9917 5.175 11.275 5.325C11.5583 5.45833 11.7917 5.64167 11.975 5.875C12.1083 6.025 12.25 6.13333 12.4 6.2C12.5667 6.25 12.7167 6.24167 12.85 6.175C13.05 6.09167 13.1833 5.95833 13.25 5.775C13.3333 5.59167 13.3167 5.425 13.2 5.275C12.9333 4.89167 12.6 4.575 12.2 4.325C11.8167 4.075 11.4 3.93333 10.95 3.9V3.375C10.95 3.19167 10.8833 3.03333 10.75 2.9C10.6167 2.76667 10.4583 2.7 10.275 2.7C10.0917 2.7 9.93333 2.76667 9.8 2.9C9.66667 3.03333 9.6 3.19167 9.6 3.375V3.9C8.75 4.06667 8.09167 4.41667 7.625 4.95C7.175 5.46667 6.95 6.05 6.95 6.7C6.95 7.45 7.175 8.05833 7.625 8.525C8.075 8.975 8.81667 9.38333 9.85 9.75C10.9167 10.15 11.6417 10.5083 12.025 10.825C12.4083 11.125 12.6 11.5333 12.6 12.05C12.6 12.6833 12.375 13.1417 11.925 13.425C11.475 13.7083 10.9667 13.85 10.4 13.85C9.91667 13.85 9.48333 13.7333 9.1 13.5C8.71667 13.25 8.4 12.9 8.15 12.45C8.05 12.2833 7.90833 12.1667 7.725 12.1C7.55833 12.0333 7.39167 12.0333 7.225 12.1C7.05833 12.1667 6.93333 12.2917 6.85 12.475C6.76667 12.6583 6.76667 12.8333 6.85 13C7.11667 13.5667 7.475 14.0167 7.925 14.35C8.375 14.6833 8.91667 14.9167 9.55 15.05V15.625C9.55 15.8083 9.61667 15.9667 9.75 16.1C9.88333 16.2333 10.0417 16.3 10.225 16.3Z"
                  fill="#333333"
                />
              </svg>
            }
          />
          <MetricCard
            title="Distributed Point"
            value="590"
            backgroundColor="bg-white"
            textColor="text-black"
            icon={
              <svg
                width="23"
                height="21"
                viewBox="0 0 23 21"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M11.65 14.85C12.2167 14.85 12.725 14.7083 13.175 14.425C13.625 14.1417 13.85 13.6833 13.85 13.05C13.85 12.5333 13.6583 12.125 13.275 11.825C12.8917 11.5083 12.1667 11.15 11.1 10.75C10.0667 10.3833 9.325 9.975 8.875 9.525C8.425 9.05833 8.2 8.45 8.2 7.7C8.2 7.05 8.43333 6.45833 8.9 5.925C9.36667 5.39167 10.0167 5.05 10.85 4.9V4.375C10.85 4.19167 10.9167 4.03333 11.05 3.9C11.1833 3.76667 11.3417 3.7 11.525 3.7C11.7083 3.7 11.8667 3.76667 12 3.9C12.1333 4.03333 12.2 4.19167 12.2 4.375V4.9C12.6833 4.93333 13.125 5.09167 13.525 5.375C13.925 5.64167 14.2583 5.975 14.525 6.375C14.6083 6.50833 14.6083 6.65833 14.525 6.825C14.4583 6.975 14.3417 7.08333 14.175 7.15C14.0083 7.21667 13.8333 7.225 13.65 7.175C13.4833 7.125 13.35 7.03333 13.25 6.9C13.05 6.66667 12.8083 6.475 12.525 6.325C12.2583 6.175 11.9333 6.1 11.55 6.1C10.9333 6.1 10.4417 6.25 10.075 6.55C9.725 6.85 9.55 7.23333 9.55 7.7C9.55 8.16667 9.725 8.53333 10.075 8.8C10.425 9.06667 11.125 9.375 12.175 9.725C13.375 10.1583 14.175 10.65 14.575 11.2C14.9917 11.7333 15.2 12.35 15.2 13.05C15.2 13.5333 15.1083 13.9583 14.925 14.325C14.7583 14.675 14.5333 14.975 14.25 15.225C13.9667 15.4583 13.6417 15.65 13.275 15.8C12.9083 15.9333 12.5333 16.0333 12.15 16.1V16.625C12.15 16.8083 12.0833 16.9667 11.95 17.1C11.8167 17.2333 11.6583 17.3 11.475 17.3C11.2917 17.3 11.1333 17.2333 11 17.1C10.8667 16.9667 10.8 16.8083 10.8 16.625V16.05C10.1833 15.9167 9.65 15.6833 9.2 15.35C8.75 15 8.38333 14.5417 8.1 13.975C8.01667 13.8083 8.01667 13.6417 8.1 13.475C8.18333 13.2917 8.30833 13.1667 8.475 13.1C8.64167 13.0333 8.80833 13.0333 8.975 13.1C9.15833 13.1667 9.29167 13.2833 9.375 13.45C9.64167 13.9 9.96667 14.25 10.35 14.5C10.75 14.7333 11.1833 14.85 11.65 14.85ZM11.5 21C9.55 21 7.775 20.5167 6.175 19.55C4.59167 18.5833 3.35 17.2917 2.45 15.675V17.9C2.45 18.1167 2.375 18.3 2.225 18.45C2.09167 18.5833 1.91667 18.65 1.7 18.65C1.48333 18.65 1.3 18.5833 1.15 18.45C1.01667 18.3 0.95 17.9 0.95 17.9V14.05C0.95 13.8 1.03333 13.5917 1.2 13.425C1.38333 13.2417 1.6 13.15 1.85 13.15H5.7C5.91667 13.15 6.09167 13.225 6.225 13.375C6.375 13.5083 6.45 13.6833 6.45 13.9C6.45 14.1167 6.375 14.3 6.225 14.45C6.09167 14.5833 5.91667 14.65 5.7 14.65H3.6C4.33333 16.1167 5.40833 17.2917 6.825 18.175C8.24167 19.0583 9.8 19.5 11.5 19.5C13.8167 19.5 15.8167 18.7333 17.5 17.2C19.2 15.6667 20.1833 13.75 20.45 11.45C20.4667 11.25 20.55 11.0833 20.7 10.95C20.85 10.8167 21.0333 10.75 21.25 10.75C21.45 10.75 21.625 10.825 21.775 10.975C21.925 11.1083 21.9833 11.275 21.95 11.475C21.8333 12.8083 21.475 14.0583 20.875 15.225C20.2917 16.375 19.5333 17.3833 18.6 18.25C17.6667 19.1 16.5917 19.775 15.375 20.275C14.1583 20.7583 12.8667 21 11.5 21ZM11.5 1.5C9.21667 1.5 7.21667 2.25833 5.5 3.775C3.8 5.275 2.81667 7.2 2.55 9.55C2.53333 9.75 2.45 9.91667 2.3 10.05C2.15 10.1833 1.96667 10.25 1.75 10.25C1.53333 10.25 1.35 10.1833 1.2 10.05C1.06667 9.9 1.01667 9.725 1.05 9.525C1.18333 8.15833 1.55 6.9 2.15 5.75C2.75 4.58333 3.51667 3.575 4.45 2.725C5.38333 1.875 6.45 1.20833 7.65 0.724999C8.86667 0.241665 10.15 -1.43051e-06 11.5 -1.43051e-06C13.4333 -1.43051e-06 15.2 0.483332 16.8 1.45C18.4167 2.41667 19.6667 3.725 20.55 5.375V3.1C20.55 2.88333 20.6167 2.70833 20.75 2.575C20.9 2.425 21.0833 2.35 21.3 2.35C21.5167 2.35 21.6917 2.425 21.825 2.575C21.975 2.70833 22.05 2.88333 22.05 3.1V6.95C22.05 7.2 21.9583 7.41667 21.775 7.6C21.6083 7.76667 21.4 7.85 21.15 7.85H17.3C17.0833 7.85 16.9 7.78333 16.75 7.65C16.6167 7.5 16.55 7.31667 16.55 7.1C16.55 6.88333 16.6167 6.70833 16.75 6.575C16.9 6.425 17.0833 6.35 17.3 6.35H19.4C18.6833 4.91667 17.6167 3.75 16.2 2.85C14.7833 1.95 13.2167 1.5 11.5 1.5Z"
                  fill="#333333"
                />
              </svg>
            }
          />
          <MetricCard
            title="Redeemed Point"
            value="260"
            backgroundColor="bg-white"
            textColor="text-black"
            icon={
              <svg
                width="17"
                height="18"
                viewBox="0 0 17 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M3.25 12.225C3.03333 12.225 2.85 12.1583 2.7 12.025C2.56667 11.875 2.5 11.6917 2.5 11.475V11.225H0.75C0.533334 11.225 0.35 11.1583 0.2 11.025C0.066667 10.875 2.38419e-07 10.6917 2.38419e-07 10.475C2.38419e-07 10.275 0.066667 10.1 0.2 9.95C0.35 9.8 0.533334 9.725 0.75 9.725H5V7.225H0.875C0.625 7.225 0.416667 7.14167 0.25 6.975C0.0833336 6.80833 2.38419e-07 6.6 2.38419e-07 6.35V2.625C2.38419e-07 2.375 0.0833336 2.16667 0.25 2C0.416667 1.81667 0.625 1.725 0.875 1.725H2.5V1.475C2.5 1.275 2.56667 1.1 2.7 0.949999C2.85 0.799999 3.03333 0.724999 3.25 0.724999C3.46667 0.724999 3.64167 0.799999 3.775 0.949999C3.925 1.1 4 1.275 4 1.475V1.725H5.75C5.96667 1.725 6.14167 1.8 6.275 1.95C6.425 2.1 6.5 2.275 6.5 2.475C6.5 2.69167 6.425 2.875 6.275 3.025C6.14167 3.15833 5.96667 3.225 5.75 3.225H1.5V5.725H5.625C5.875 5.725 6.08333 5.81667 6.25 6C6.41667 6.16667 6.5 6.375 6.5 6.625V10.35C6.5 10.6 6.41667 10.8083 6.25 10.975C6.08333 11.1417 5.875 11.225 5.625 11.225H4V11.475C4 11.6917 3.925 11.875 3.775 12.025C3.64167 12.1583 3.46667 12.225 3.25 12.225ZM9.7 17.75C9.58333 17.75 9.46667 17.7333 9.35 17.7C9.25 17.6667 9.15833 17.6 9.075 17.5L6.325 14.75C6.19167 14.6167 6.11667 14.45 6.1 14.25C6.1 14.0333 6.175 13.85 6.325 13.7C6.475 13.5667 6.65 13.5 6.85 13.5C7.05 13.5 7.225 13.5667 7.375 13.7L9.7 16.025L14.85 10.9C14.9833 10.75 15.15 10.675 15.35 10.675C15.5667 10.675 15.75 10.75 15.9 10.9C16.05 11.0333 16.125 11.2083 16.125 11.425C16.125 11.625 16.05 11.8 15.9 11.95L10.325 17.5C10.2417 17.6 10.1417 17.6667 10.025 17.7C9.925 17.7333 9.81667 17.75 9.7 17.75Z"
                  fill="#333333"
                />
              </svg>
            }
          />
          <MetricCard
            title="Unredeemed Point"
            value="5012"
            backgroundColor="bg-white"
            textColor="text-black"
            icon={
              <svg
  width="16"
  height="19"
  viewBox="0 0 16 19"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
>
  <path
    d="M7.425 15.125V15.7C7.425 15.8167 7.46667 15.9167 7.55 16C7.63333 16.0833 7.73333 16.125 7.85 16.125H8.475C8.59167 16.125 8.69167 16.0833 8.775 16C8.875 15.9 8.925 15.7917 8.925 15.675V15.125H10.175C10.3917 15.125 10.5667 15.0583 10.7 14.925C10.85 14.775 10.925 14.5917 10.925 14.375V11.375C10.925 11.1583 10.85 10.9833 10.7 10.85C10.5667 10.7 10.3917 10.625 10.175 10.625H6.925V9.125H10.175C10.3917 9.125 10.5667 9.05833 10.7 8.925C10.85 8.775 10.925 8.59167 10.925 8.375C10.925 8.15833 10.85 7.98333 10.7 7.85C10.5667 7.7 10.3917 7.625 10.175 7.625H8.925V7.05C8.925 6.93333 8.88333 6.83333 8.8 6.75C8.71667 6.66667 8.61667 6.625 8.5 6.625H7.875C7.75833 6.625 7.65 6.675 7.55 6.775C7.46667 6.85833 7.425 6.95833 7.425 7.075V7.625H6.175C5.95833 7.625 5.775 7.7 5.625 7.85C5.49167 7.98333 5.425 8.15833 5.425 8.375V11.375C5.425 11.5917 5.49167 11.775 5.625 11.925C5.775 12.0583 5.95833 12.125 6.175 12.125H9.425V13.625H6.175C5.95833 13.625 5.775 13.7 5.625 13.85C5.49167 13.9833 5.425 14.1583 5.425 14.375C5.425 14.5917 5.49167 14.775 5.625 14.925C5.775 15.125 6.175 15.125H7.425ZM2.3 19C1.8 19 1.375 18.825 1.025 18.475C0.675 18.125 0.5 17.7 0.5 17.2V1.8C0.5 1.3 0.675 0.875 1.025 0.525C1.375 0.175 1.8 0 2.3 0H10.875L15.5 4.625V17.2C15.5 17.7 15.325 18.125 14.975 18.475C14.625 18.825 14.2 19 13.7 19H2.3ZM2.3 17.5H13.7C13.7667 17.5 13.8333 17.4667 13.9 17.4C13.9667 17.3333 14 17.2667 14 17.2V5.375H11.025C10.7583 5.375 10.5417 5.29167 10.375 5.125C10.2083 4.95833 10.125 4.74167 10.125 4.475V1.5H2.3C2.23333 1.5 2.16667 1.53333 2.1 1.6C2.03333 1.66667 2 1.73333 2 1.8V17.2C2 17.2667 2.03333 17.3333 2.1 17.4C2.16667 17.4667 2.23333 17.5 2.3 17.5ZM2 1.5V5.375V17.2C2 17.2667 2 17.3333 2 17.4C2 17.4667 2 17.5 2 17.5C2 17.5 2 17.4667 2 17.4C2 17.3333 2 17.2667 2 17.2V1.8C2 1.73333 2 1.66667 2 1.6C2 1.53333 2 1.5 2 1.5Z"
    fill="#333333"
  />
</svg>

            }
            className="my-custom"
          />
        </div>
        <div className="tab-container">
        <div className="tab-header">
          {tabs.map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`tab-item ${activeTab === tab.key ? "active-tab" : ""}`}
            >
              {tab.label}
            </button>
          ))}
          </div>
          <div className="tab-actions">
            <button className="action-btn"><svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="40" height="40" rx="20" fill="#F2E6E6"/>
<path d="M17.525 24.125C15.8083 24.125 14.3583 23.5333 13.175 22.35C11.9917 21.15 11.4 19.7 11.4 18C11.4 16.3 11.9917 14.8583 13.175 13.675C14.3583 12.475 15.8083 11.875 17.525 11.875C19.225 11.875 20.6667 12.475 21.85 13.675C23.0333 14.8583 23.625 16.3 23.625 18C23.625 18.7167 23.5083 19.4 23.275 20.05C23.0417 20.7 22.725 21.2667 22.325 21.75L28.075 27.5C28.2083 27.6333 28.275 27.8083 28.275 28.025C28.275 28.225 28.2083 28.4 28.075 28.55C27.925 28.7 27.7417 28.775 27.525 28.775C27.325 28.775 27.1583 28.7 27.025 28.55L21.25 22.8C20.75 23.2167 20.175 23.5417 19.525 23.775C18.875 24.0083 18.2083 24.125 17.525 24.125ZM17.525 22.625C18.8083 22.625 19.8917 22.175 20.775 21.275C21.675 20.375 22.125 19.2833 22.125 18C22.125 16.7167 21.675 15.625 20.775 14.725C19.8917 13.825 18.8083 13.375 17.525 13.375C16.225 13.375 15.125 13.825 14.225 14.725C13.3417 15.625 12.9 16.7167 12.9 18C12.9 19.2833 13.3417 20.375 14.225 21.275C15.125 22.175 16.225 22.625 17.525 22.625Z" fill="#800000"/>
</svg>
</button>
            <button className="action-btn"><svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="40" height="40" rx="20" fill="#F2E6E6"/>
<path d="M19.375 28C19.125 28 18.9167 27.9167 18.75 27.75C18.5833 27.5833 18.5 27.375 18.5 27.125V21.325L12.9 14.225C12.7167 13.9583 12.6917 13.6917 12.825 13.425C12.9583 13.1417 13.1833 13 13.5 13H26.5C26.8167 13 27.0417 13.1417 27.175 13.425C27.3083 13.6917 27.2833 13.9583 27.1 14.225L21.5 21.325V27.125C21.5 27.375 21.4167 27.5833 21.25 27.75C21.0833 27.9167 20.875 28 20.625 28H19.375ZM20 20.8L24.95 14.5H15.05L20 20.8Z" fill="#800000"/>
</svg>
</button>
            <button className="action-btn"><svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="40" height="40" rx="20" fill="#F2E6E6"/>
<path d="M20 23.9C19.8833 23.9 19.7667 23.8833 19.65 23.85C19.55 23.8167 19.4583 23.75 19.375 23.65L16.25 20.55C16.1 20.4 16.025 20.225 16.025 20.025C16.0417 19.825 16.1167 19.65 16.25 19.5C16.4167 19.3333 16.6 19.25 16.8 19.25C17 19.25 17.175 19.325 17.325 19.475L19.25 21.4V13.75C19.25 13.5333 19.3167 13.3583 19.45 13.225C19.6 13.075 19.7833 13 20 13C20.2167 13 20.3917 13.075 20.525 13.225C20.675 13.3583 20.75 13.5333 20.75 13.75V21.4L22.675 19.475C22.825 19.325 23 19.25 23.2 19.25C23.4 19.25 23.5833 19.3333 23.75 19.5C23.8833 19.65 23.95 19.825 23.95 20.025C23.9667 20.225 23.9 20.4 23.75 20.55L20.625 23.65C20.5417 23.75 20.4417 23.8167 20.325 23.85C20.225 23.8833 20.1167 23.9 20 23.9ZM14.3 28C13.8 28 13.375 27.825 13.025 27.475C12.675 27.125 12.5 26.7 12.5 26.2V24.225C12.5 24.0083 12.5667 23.8333 12.7 23.7C12.85 23.55 13.0333 23.475 13.25 23.475C13.4667 23.475 13.6417 23.55 13.775 23.7C13.925 23.8333 14 24.0083 14 24.225V26.2C14 26.2667 14.0333 26.3333 14.1 26.4C14.1667 26.4667 14.2333 26.5 14.3 26.5H25.7C25.7667 26.5 25.8333 26.4667 25.9 26.4C25.9667 26.3333 26 26.2667 26 26.2V24.225C26 24.0083 26.0667 23.8333 26.2 23.7C26.35 23.55 26.5333 23.475 26.75 23.475C26.9667 23.475 27.1417 23.55 27.275 23.7C27.425 23.8333 27.5 24.0083 27.5 24.225V26.2C27.5 26.7 27.325 27.125 26.975 27.475C26.625 27.825 26.2 28 25.7 28H14.3Z" fill="#800000"/>
</svg>
</button>
          </div>
        </div>
      </div>
      <div className="padding-20">
        <Table
          headers={currentTabConfig.headers}
          data={currentTabConfig.data}
          // onStatusChange={handleStatusChange}
          onStatusChange={(index, newStatus) => {
          const updatedData = [...currentTabConfig.data];
          updatedData[index].status = newStatus;
          // Update the data in tabConfig or state as needed
        }}
          headerToKeyMap={currentTabConfig.headerToKeyMap}
          showPagination={false}
          statusOptions={currentTabConfig.statusOptions}
          statusButtonText={currentTabConfig.statusButtonText}
          // statusOptions={statusOptions}
          renderCustomActions={renderCustomActions}
          className="custom-table"
        />
      </div>
    </div>
  );
};

export default Rewards;